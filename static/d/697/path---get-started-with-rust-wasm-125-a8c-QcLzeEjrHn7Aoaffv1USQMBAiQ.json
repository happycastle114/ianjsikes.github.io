{"data":{"site":{"siteMetadata":{"title":"Ian J Sikes","author":"Ian J Sikes"}},"markdownRemark":{"id":"4dc9179c-43e2-589b-80bd-a4e7e1543eb3","excerpt":"UPDATE!The Rust Compiler now has native support for compilation to WebAssembly without Emscripten! Most of the info in this post is no longer relevant. For anâ€¦","html":"<blockquote>\n<h2>UPDATE!</h2>\n<p>The Rust Compiler now has native support for compilation to WebAssembly without Emscripten! Most of the info in this post is <strong>no longer relevant</strong>. For an <em>amazing</em> and up-to-date resource on Rust and WebAssembly, check out the <a href=\"https://rustwasm.github.io/docs/book/\">Rust and WebAssembly Book</a>.</p>\n</blockquote>\n<p>Iâ€™ve been seeing a lot of really cool <a href=\"https://twitter.com/search?q=%23wasm&#x26;src=typd\">#wasm</a> <em>(WebAssembly)</em> stuff on <a href=\"https://twitter.com/jose_pedro_dias/status/876592025881251840\">Twitter</a> and <a href=\"https://news.ycombinator.com/item?id=14341623\">Hacker News</a> lately, but I didnâ€™t know much about what it is exactly, or how to start using it. Because it is so new â€” only being enabled in Chrome last March â€” up-to-date guides are few and far between. After struggling through getting something to run, hereâ€™s what Iâ€™ve learned:</p>\n<p><a href=\"http://webassembly.org/\">WebAssembly</a> is a <em>cool new binary format</em> and compile target for the web. That means you can compile languages like C, C++, and Rust to .wasm files and execute that code in your browser. In most cases, the resulting code is significantly <a href=\"https://hacks.mozilla.org/2017/03/why-webassembly-is-faster-than-asm-js/\">faster <em>and</em> smaller</a> than Javascript.</p>\n<p>This guide will walk you through setting up Rust, WebAssembly, and Webpack in a typical JS web app. The goal is to be able to execute low-level Rust code in the browser alongside the Javascript you know and love <em>(or hate)</em>.</p>\n<p><strong><em>Note:</em></strong> These technologies are constantly changing. This guide is using:</p>\n<ul>\n<li>webpack 3.0.0</li>\n<li>cargo 0.19.0</li>\n<li>emcc 1.37.13</li>\n</ul>\n<p><a href=\"https://github.com/ianjsikes/rust-wasm-webpack-tutorial\">Here is the finished project</a>. If you run into a problem, let me know with an <a href=\"https://github.com/ianjsikes/rust-wasm-webpack-tutorial/issues/new\">issue</a> or <a href=\"https://github.com/ianjsikes/rust-wasm-webpack-tutorial/compare\">PR</a> ðŸ˜Š.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2000/1*aFsLoH0D8wk-kXxAuaZreA.jpeg\" alt=\"WASM Logo\"></p>\n<h3>What you will need</h3>\n<p>Follow these links to install:</p>\n<ul>\n<li><a href=\"https://nodejs.org/en/download/\">Node</a></li>\n<li><a href=\"https://www.rust-lang.org/en-US/install.html\">Rust</a></li>\n</ul>\n<h3>Install the Emscripten Rust compiler</h3>\n<p>Install the WebAssembly <a href=\"http://kripken.github.io/emscripten-site/\">Emscripten</a> compile target for Rust:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ rustup target <span class=\"token function\">add</span> wasm32-unknown-emscripten</code></pre></div>\n<p>Install <a href=\"https://cmake.org\">cmake</a>. This varies depending on your platform, choose the option right for you or see the <a href=\"https://cmake.org/install/\">install page</a> for more options:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ brew <span class=\"token function\">install</span> cmake                  <span class=\"token comment\"># MacOS, brew</span>\n$ <span class=\"token function\">sudo</span> port <span class=\"token function\">install</span> cmake             <span class=\"token comment\"># MacOS, MacPorts</span>\n$ <span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> cmake          <span class=\"token comment\"># Debian Linux</span></code></pre></div>\n<p>Install the Emscripten SDK. This is going to take a while (<em>~2 hours for me</em>).</p>\n<blockquote>\n<p>Note: If ./emsdk update or ./emsdk install give you errors, it may be that Python3 is your default Python. Try installing Python 2.7 and replacing ./emsdk â€¦ with python2.7 emsdk â€¦</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">cd</span> ~\n$ <span class=\"token function\">wget</span> <span class=\"token punctuation\">[</span>https://s3.amazonaws.com/mozilla-games/emscripten/releases/emsdk-portable.tar.gz<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>https://s3.amazonaws.com/mozilla-games/emscripten/releases/emsdk-portable.tar.gz<span class=\"token punctuation\">)</span>\n$ <span class=\"token function\">tar</span> -xvf emsdk-portable.tar.gz\n$ <span class=\"token function\">cd</span> emsdk-portable\n$ ./emsdk update\n$ ./emsdk <span class=\"token function\">install</span> sdk-incoming-64bit</code></pre></div>\n<p><img src=\"https://imgs.xkcd.com/comics/compiling.png\" alt=\"https://xkcd.com/303/\"></p>\n<p><a href=\"https://xkcd.com/303/\"><em>https://xkcd.com/303/</em></a></p>\n<p>Next, weâ€™ll need to add the following directories to our PATH environment variable:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">~/emsdk-portable\n~/emsdk-portable/clang/fastcomp/build_incoming_64/bin\n~/emsdk-portable/emscripten/incoming</code></pre></div>\n<p>Reload the terminal, then run emcc -v to check that the Emscripten compiler is installed.</p>\n<h3>Compile and load Rust with Webpack</h3>\n<p>Letâ€™s create a Rust/Javascript hybrid project:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">cargo new tutorial --bin --vcs none\n<span class=\"token function\">cd</span> tutorial\n<span class=\"token function\">npm</span> init        <span class=\"token comment\"># You can just hit enter for every option</span></code></pre></div>\n<p>We need to install <a href=\"https://webpack.js.org/\">webpack</a>, <a href=\"https://www.npmjs.com/package/http-server\">http-server</a> to serve our content, and <a href=\"https://www.npmjs.com/package/rust-wasm-loader\">rust-wasm-loader</a> to compile and load Rust code as .wasm modules.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev webpack\nhttp-server rust-wasm-loader</code></pre></div>\n<p>Add a few helpful scripts to our package.json:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"compile\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"webpack --progress\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"serve\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http-server\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Create an index.html:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\">&lt;!DOCTYPE html></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Hello World<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>build/bundle.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Create a webpack.config.js:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  entry<span class=\"token punctuation\">:</span> <span class=\"token string\">'./src/index.js'</span><span class=\"token punctuation\">,</span>\n  output<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    filename<span class=\"token punctuation\">:</span> <span class=\"token string\">'bundle.js'</span><span class=\"token punctuation\">,</span>\n    path<span class=\"token punctuation\">:</span> __dirname <span class=\"token operator\">+</span> <span class=\"token string\">'/build'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  module<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    rules<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        test<span class=\"token punctuation\">:</span> <span class=\"token regex\">/\\.rs$/</span><span class=\"token punctuation\">,</span>\n        use<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n          loader<span class=\"token punctuation\">:</span> <span class=\"token string\">'rust-wasm-loader'</span><span class=\"token punctuation\">,</span>\n          options<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// The path to the webpack output relative to the project root</span>\n            path<span class=\"token punctuation\">:</span> <span class=\"token string\">'build'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// The .wasm 'glue' code generated by Emscripten requires these node builtins,</span>\n  <span class=\"token comment\">// but won't actually use them in a web environment. We tell Webpack to not resolve those</span>\n  <span class=\"token comment\">// require statements since we know we won't need them.</span>\n  externals<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    fs<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    path<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Letâ€™s add a function to our src/main.rs that we will call from Javascript:</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, world!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Functions that you wish to access from Javascript</span>\n<span class=\"token comment\">// must be marked as no_mangle</span>\n<span class=\"token attribute attr-name\">#[no_mangle]</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span> i32<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> i32<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> i32 <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Finally, weâ€™ll write some code in src/index.js to load and use the WebAssembly module:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> wasm <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./main.rs'</span><span class=\"token punctuation\">)</span>\n\nwasm<span class=\"token punctuation\">.</span><span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> noExitRuntime<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">module</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Create a Javascript wrapper around our Rust function</span>\n  <span class=\"token keyword\">const</span> add <span class=\"token operator\">=</span> module<span class=\"token punctuation\">.</span><span class=\"token function\">cwrap</span><span class=\"token punctuation\">(</span><span class=\"token string\">'add'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'number'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Calling rust functions from javascript!'</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Run these commands to compile and serve the project:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> run compile\n$ <span class=\"token function\">npm</span> run serve</code></pre></div>\n<p>Navigate the browser to localhost:8080, open the Javascript console, and rest your weary eyes on the glorious output of our WebAssembly compiled Rust code!</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/2000/1*U_gGGdZpNd7sQfxBkeuHhg.png\" alt=\"Itâ€™s happening!\"><em>Itâ€™s happening!</em></p>\n<p><strong>We did it!</strong> <a href=\"https://github.com/ianjsikes/rust-wasm-webpack-tutorial\">Here is the finished project</a>. I hope this tutorial helps you explore the <em>exciting new world of WebAssembly</em>. Below are some resources that Iâ€™ve found useful. Contact me on <a href=\"https://twitter.com/ianjsikes\">Twitter</a> if you have any questions/comments/feedback/hate-mail.</p>\n<h3>Resources</h3>\n<ul>\n<li>\n<p><a href=\"http://www.hellorust.com/emscripten/\">Compiling Rust to your Browser</a></p>\n</li>\n<li>\n<p><a href=\"http://kripken.github.io/emscripten-site/docs/index.html\">Emscripten Docs</a></p>\n</li>\n<li>\n<p><a href=\"http://asquera.de/blog/2017-04-10/the-path-to-rust-on-the-web/\">The Path to Rust on the Web</a> â€” This post has more in-depth usage examples.</p>\n</li>\n<li>\n<p><a href=\"https://crates.io/crates/webplatform\">webplatform</a> â€” A Rust crate for interacting with the DOM.</p>\n</li>\n<li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/WebAssembly\">WebAssembly â€” MDN</a></p>\n</li>\n<li>\n<p><a href=\"https://users.rust-lang.org/t/compiling-to-the-web-with-rust-and-emscripten/7627\">Compiling to the web with Rust and emscripten</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/mrdziuban/rust-emscripten-loader\">mrdziuban/rust-emscripten-loader</a> â€” <a href=\"https://www.npmjs.com/package/rust-wasm-loader\">rust-wasm-loader</a> is a fork of this awesome project with small changes to the way modules are initialized. Check this loader out if you want the flexibility of choosing between asm.js and WebAssembly targets.</p>\n</li>\n</ul>","frontmatter":{"title":"Get Started with Rust, WebAssembly, and Webpack","date":"June 22, 2017","description":"A quick guide to running Rust code on the web."}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/get-started-with-rust-wasm/","previous":{"fields":{"slug":"/placeholder-post/"},"frontmatter":{"title":"Placeholder"}},"next":null}}